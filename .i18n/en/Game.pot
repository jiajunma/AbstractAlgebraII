msgid ""
msgstr "Project-Id-Version: Game v4.7.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Wed Apr  2 11:47:40 2025\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Levels.BasicLean.L01_rfl
msgid "Rfl tactic"
msgstr ""

#: Game.Levels.BasicLean.L01_rfl
msgid "This level gets you familiar with the game interface."
msgstr ""

#: Game.Levels.BasicLean.L01_rfl
msgid "The equality can be settaled by evaluation."
msgstr ""

#: Game.Levels.BasicLean.L01_rfl
msgid "You can use either `rfl` or `norm_num`."
msgstr ""

#: Game.Levels.BasicLean.L01_rfl
msgid "rfl and norm_num are very handy to close obvious goals."
msgstr ""

#: Game.Levels.BasicLean.L02_rw
msgid "Rewrite"
msgstr ""

#: Game.Levels.BasicLean.L02_rw
msgid "This level gets you familiar with the game interface."
msgstr ""

#: Game.Levels.BasicLean.L02_rw
msgid "You can use rw [h] to rewrite `x` by `2`."
msgstr ""

#: Game.Levels.BasicLean.L02_rw
msgid "You can either start using `¬´{h}¬ª` or `¬´{g}¬ª`."
msgstr ""

#: Game.Levels.BasicLean.L02_rw
msgid "You should use `¬´{h}¬ª` now."
msgstr ""

#: Game.Levels.BasicLean.L02_rw
msgid "You should use `¬´{g}¬ª` now."
msgstr ""

#: Game.Levels.BasicLean.L02_rw
msgid "rw is the most basic command you can use."
msgstr ""

#: Game.Levels.BasicLean
msgid "Basic Lean"
msgstr ""

#: Game.Levels.BasicLean
msgid "We start with some basic Lean tactics."
msgstr ""

#: Game.Levels.BasicGroupTheory.L01_identity
msgid "Suppose $G$ is a set with a binary operation $*$.\n"
"\n"
"The following statement claims that identity element is unique.\n"
"\n"
"Suppose $e$ and $e'$ are two identity elements, we need to prove $e=e'$."
msgstr ""

#: Game.Levels.BasicGroupTheory.L01_identity
msgid "Use `h1`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L01_identity
msgid "Use `h4`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L02_assoc
msgid "A semi-group is a set $G$ with a binary operation $*$ such that $*$ has associative law."
msgstr ""

#: Game.Levels.BasicGroupTheory.L02_assoc
msgid "Use `group`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L03_inverse
msgid "A  monoid is a semi-group with identity and .\n"
"\n"
"A  group is a monoid such that every element has inverse."
msgstr ""

#: Game.Levels.BasicGroupTheory.L03_inverse
msgid "Use `a‚Åª¬π`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L03_inverse
msgid "Also can use And.intro to split the goal"
msgstr ""

#: Game.Levels.BasicGroupTheory.L03_inverse
msgid "Use `group`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L03_inverse
msgid "Use `group`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L04_inverse_unique
msgid "Note that if inverse exits, then it is unique."
msgstr ""

#: Game.Levels.BasicGroupTheory.L04_inverse_unique
msgid "Use `mul_one`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L04_inverse_unique
msgid "Use `leftinvc`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L04_inverse_unique
msgid "Use `assoc`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L04_inverse_unique
msgid "Use `rightinvb`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L04_inverse_unique
msgid "Use `one_mul`"
msgstr ""

#: Game.Levels.BasicGroupTheory.L05_Zn
msgid "Let Z_n be the set of integers modulo $n$.\n"
"Then Z_n form a commutative group (i.e. an Abelian group)."
msgstr ""

#: Game.Levels.BasicGroupTheory.L05_Zn
msgid "Use the definition to simplify the goal.\n"
"You can use `simp [add_def]'"
msgstr ""

#: Game.Levels.BasicGroupTheory.L05_Zn
msgid "Use `ext' tactic"
msgstr ""

#: Game.Levels.BasicGroupTheory.L05_Zn
msgid "Use `simp' to simplify the goal"
msgstr ""

#: Game.Levels.BasicGroupTheory.L05_Zn
msgid "Use `add_assoc'"
msgstr ""

#: Game.Levels.BasicGroupTheory.L05_Zn
msgid "Use the definition of neg"
msgstr ""

#: Game.Levels.BasicGroupTheory.L05_Zn
msgid "Use `add_comm'"
msgstr ""

#: Game.Levels.BasicGroupTheory.L06_Subgroup
msgid "A subgroup of a group $G$ is a subset $H$ of $G$ such that $*$ is closed under $H$.\n"
"We have a criterion for a subgroup:\n"
"\n"
". 1 ‚àà  H\n"
"\n"
". a ‚àà  H ‚àß b ‚àà  H ‚áí a * b‚Åª¬π ‚àà H\n"
"\n"
"For example  is a group under addition.\n"
"Now the set of even integers, 2‚Ñ§ := {2n | n ‚àà ‚Ñ§ }, is a subgroup of ‚Ñ§.\n"
"More generally, k‚Ñ§ := {k*n | n ‚àà ‚Ñ§ } is also a subgroup of ‚Ñ§.\n"
"Morover, all subgoup of ‚Ñ§ is of the form k‚Ñ§ for some k ‚àà ‚Ñï.\n"
"\n"
"In fact, ‚Ñï ‚Üí {subgroup of ‚Ñ§} given by k ‚Ü¶ k‚Ñ§ is a bijection."
msgstr ""

#: Game.Levels.BasicGroupTheory.L06_Subgroup
msgid "Intro all elements"
msgstr ""

#: Game.Levels.BasicGroupTheory.L06_Subgroup
msgid "Use Int.sub_emod"
msgstr ""

#: Game.Levels.BasicGroupTheory.L06_Subgroup
msgid "Use hypothesis to simp the goal"
msgstr ""

#: Game.Levels.BasicGroupTheory.L07_Commutator
msgid "A `‚ÅÖa,b‚ÅÜ:=a * b * a‚Åª¬π * b‚Åª¬π' is called the commutator of $a$ and $b$.\n"
"\n"
"A group is abelian if all commutators are one."
msgstr ""

#: Game.Levels.BasicGroupTheory.L07_Commutator
msgid "Use `constructor' to split the goal into two parts"
msgstr ""

#: Game.Levels.BasicGroupTheory.L07_Commutator
msgid "replace `a * b'  by `b * a' using the hypothesis"
msgstr ""

#: Game.Levels.BasicGroupTheory.L07_Commutator
msgid "Use `group' to finish the proof"
msgstr ""

#: Game.Levels.BasicGroupTheory.L07_Commutator
msgid "apply `mul_right_cancel' twice to translate the goal"
msgstr ""

#: Game.Levels.BasicGroupTheory.L07_Commutator
msgid "Rewrite the left hand side using the hypothesis"
msgstr ""

#: Game.Levels.BasicGroupTheory.L07_Commutator
msgid "Use `group' to finish the proof"
msgstr ""

#: Game.Levels.BasicGroupTheory.L08_ElementaryTwoGroup
msgid "If $G$ is a group such that $a * a = 1$ for all $a in G$, then $G$ is abelian."
msgstr ""

#: Game.Levels.BasicGroupTheory.L08_ElementaryTwoGroup
msgid "Use `mul_right_cancel' to translate the goal"
msgstr ""

#: Game.Levels.BasicGroupTheory.L08_ElementaryTwoGroup
msgid "Use the hypothesis"
msgstr ""

#: Game.Levels.BasicGroupTheory.L08_ElementaryTwoGroup
msgid "Use `group' to finish the proof"
msgstr ""

#: Game.Levels.BasicGroupTheory.L08_ElementaryTwoGroup
msgid "Use ¬´{inv_eq_self}¬ª smartly"
msgstr ""

#: Game.Levels.BasicGroupTheory.L08_ElementaryTwoGroup
msgid "You can use `nth_rw' to specify the location of the term to rewrite"
msgstr ""

#: Game.Levels.BasicGroupTheory.L08_ElementaryTwoGroup
msgid "Use `group' to finish the proof"
msgstr ""

#: Game.Levels.BasicGroupTheory
msgid "Basic Group Theory"
msgstr ""

#: Game.Levels.BasicGroupTheory
msgid "We now learn some basic Group Theory."
msgstr ""

#: Game
msgid "Abstract Algebra Game"
msgstr ""

#: Game
msgid "Welcome to the abstract algebra game!"
msgstr ""

#: Game
msgid "We plan to cover basic group theory, ring theory and Galois theory."
msgstr ""

#: Game
msgid "Abstract Algebra Game"
msgstr ""

#: Game
msgid "Abstract Algebra Game for MAT205 Xiamen University Malaysia."
msgstr ""
